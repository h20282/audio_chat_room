@startuml

class AudioController{
    - audio_chat_ : AudioChat
    + JoinRoom(const nlohmann::json &) : void
    + LeaveRoom(const nlohmann::json &) : void
    + SetInputDevice(const nlohmann::json &) : void
    + GetInputDevices(const nlohmann::json &) : void
    + SetUserVolume(const nlohmann::json &) : void
    + SetMuted(const nlohmann::json &) : void
}

class AudioChat{

    + JoinRoom(QString user_name, int room_id) : void
    + SetInputDevice(QString device_name) : void
    + GetInputDevices() : set<string>
    + SetUserVolume(QString name, int volume) : void
    + SetMuted(bool is_muted) : void
    + SigCollectorVolumeReady(double volume)
    + SigUserVolumeReady(QString name, double volume)
    + SigUserListReady(QList<QString> list)
    + SigUserIsMutedStatusReady(QMap<QString, bool> user_status)

    -  collector_ : AudioCollector
    -  player_ : AudioPlayer
    -  synthesizer_ : AudioSynthesizer
    -  connector_ : UdpConnector*
}

class AudioCollector{
    + Start(): void
    + SetInputDevice(QAudioDeviceInfo info): void

    + SigAudioFrameReady(AudioData frame)
    + SigAudioVolumeReady(double volume)

    - QAudioInput *input_
    - QIODevice *inputDevice_
    - QMutex mutex_
}

class AudioPlayer {
    + run() : void
    + SetProvider(AudioProvider *provider) : void
    
    - output_ : QAudioOutput*
    - audio_io_ : QIODevice*
    - provider_ : AbstractAudioFrameProvider*
}

class AudioSynthesizer {
    + GetAudioFrame() : vector<char>
    + SetVolume(QString name, int volume) : void
    - Synthese() : vector<char>
    + SigUserVolumeReady(QString name, double volume) : void 
    + onOneFrameIn(QString name, AudioData pcm_data) : void
}

class UdpConnector {
    + SetMuted(bool isMuted) : void
    + IsMuted() : bool
    + SigOneMsgReady(QString name, AudioData) : void
    + SigOneEmptyFrameReady(QString name) : void
    + onAudioFrameReady(AudioData frame) : void

    - room_id_ : int
    - is_muted_ : bool
    - encoder_ : OEncoder
    - decoders_ : map<QString, ODecoder>
}
class Encoder {
    + AudioData Encode(AudioData data)
    - encoder_ : OpusEncoder
}

class Decoder {
    + AudioData Decode(AudioData data)
    - decoder_ : OpusDecoder
}

abstract class AudioProvider {
    + GetAudioFrame() : vector<char>
}

class AudioSynthesizer implements  AudioProvider

AudioPlayer *-- AudioProvider

AudioChat *-- AudioCollector
AudioChat *-- UdpConnector
AudioChat *-- AudioSynthesizer
AudioChat *-- AudioPlayer

UdpConnector *-- Encoder
UdpConnector *-- Decoder


AudioController *-left- AudioChat 

@enduml

